

  it('should handle paymentFilterValue as a single string', async () => {
    const payload = {
      paymentHistoryQueryResponse: {
        statusCode: 200,
        data: [
          { benefitName: 'Jobseekers Allowance', amount: 100 },
          { benefitName: 'ESA', amount: 200 },
        ],
      },
    };

    req.body.benefit = 'Jobseekers Allowance';

    ServiceStackMock.redisCacheService.getPayload.resolves(JSON.stringify(payload));
    showFilterData.returns([
      { value: 'Jobseekers Allowance', checked: false },
      { value: 'ESA', checked: false },
    ]);

    const result = await postFilterPaymentHistory(ServiceStackMock, loggerMock)(req, res, next);

    expect(result).to.be.undefined;
    expect(res.render).to.have.been.called;
  });

  it('should handle paymentFilterValue as an array', async () => {
    const payload = {
      paymentHistoryQueryResponse: {
        statusCode: 200,
        data: [
          { benefitName: 'Jobseekers Allowance', amount: 100 },
          { benefitName: 'ESA', amount: 200 },
        ],
      },
    };

    req.body.benefit = ['Jobseekers Allowance'];

    ServiceStackMock.redisCacheService.getPayload.resolves(JSON.stringify(payload));
    showFilterData.returns([
      { value: 'Jobseekers Allowance', checked: false },
      { value: 'ESA', checked: false },
    ]);

    const result = await postFilterPaymentHistory(ServiceStackMock, loggerMock)(req, res, next);

    expect(result).to.be.undefined;
    expect(res.render).to.have.been.called;
  });

  it('should handle pagination logic with data length exceeding page limit', async () => {
    const payload = {
      paymentHistoryQueryResponse: {
        statusCode: 200,
        data: Array.from({ length: 25 }, (_, i) => ({
          benefitName: `Benefit ${i + 1}`,
          amount: 100 + i,
        })),
      },
    };

    ServiceStackMock.redisCacheService.getPayload.resolves(JSON.stringify(payload));
    totalDataValue.returns(payload.paymentHistoryQueryResponse.data.slice(0, 10));
    totalCountValue.returns(25);
    totalPagesValue.returns(3);

    const result = await getPaymentHistory(ServiceStackMock, loggerMock)(req, res, next);

    expect(result).to.be.undefined;
    expect(res.render).to.have.been.called;
  });

  it('should handle no paymentFilterValue and render all data', async () => {
    const payload = {
      paymentHistoryQueryResponse: {
        statusCode: 200,
        data: [
          { benefitName: 'Jobseekers Allowance', amount: 100 },
          { benefitName: 'ESA', amount: 200 },
        ],
      },
    };

    req.body.benefit = null;

    ServiceStackMock.redisCacheService.getPayload.resolves(JSON.stringify(payload));
    showFilterData.returns([
      { value: 'Jobseekers Allowance', checked: false },
      { value: 'ESA', checked: false },
    ]);

    const result = await postFilterPaymentHistory(ServiceStackMock, loggerMock)(req, res, next);

    expect(result).to.be.undefined;
    expect(res.render).to.have.been.called;
  });

  it('should handle empty data in paymentHistoryQueryResponse', async () => {
    const payload = {
      paymentHistoryQueryResponse: {
        statusCode: 200,
        data: [],
      },
    };

    ServiceStackMock.redisCacheService.getPayload.resolves(JSON.stringify(payload));
    showFilterData.returns([]);

    const result = await postFilterPaymentHistory(ServiceStackMock, loggerMock)(req, res, next);

    expect(result).to.be.undefined;
    expect(res.render).to.have.been.called;
  });

  it('should redirect to /payment-ui/ when no data is available', async () => {
    ServiceStackMock.redisCacheService.getPayload.resolves(null);

    const result = await postFilterPaymentHistory(ServiceStackMock, loggerMock)(req, res, next);

    expect(result).to.be.undefined;
    expect(res.redirect).to.have.been.calledWith('/payment-ui/');
  });
